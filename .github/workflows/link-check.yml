name: link-check
on:
  pull_request:
  push:
    branches: [ "main" ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Internal link audit (HTML)
        run: |
          python - << 'PY'
          import re, sys, json
          from pathlib import Path

          ROOT = Path('.').resolve()

          EXTERNAL = re.compile(r'^(?:https?:|mailto:|tel:|data:|javascript:|#)', re.I)
          ATTR    = re.compile(r'(?:\\b(?:src|href|data-src|poster)\\s*=\\s*(["\\\'])([^"\\\']+)\\1)', re.I)
          SRCSET  = re.compile(r'\\bsrcset\\s*=\\s*(["\\\'])([^"\\\']+)\\1', re.I)
          CSSURL  = re.compile(r'url\\(\\s*([^)]+?)\\s*\\)', re.I)

          def resolve(base: Path, url: str) -> Path | None:
            """Resolve url relativa ao arquivo base; / começa na raiz do repo."""
            u = url.strip().strip('"\\\'')
            if not u or EXTERNAL.match(u): return None
            u = u.split('#',1)[0].split('?',1)[0]
            u = u.replace('\\\\','/')
            cand = (ROOT / u.lstrip('/')) if u.startswith('/') else (base.parent / u)
            cand = cand.resolve()
            # não permitir sair da raiz do repo
            try:
              cand.relative_to(ROOT)
            except Exception:
              return cand  # tratar como missing
            return cand

          problems = []

          for html in ROOT.rglob('*.html'):
            txt = html.read_text(encoding='utf-8', errors='ignore')

            for m in ATTR.finditer(txt):
              url = m.group(2)
              cand = resolve(html, url)
              if cand and not cand.exists():
                problems.append({'file': str(html), 'attr': 'attr', 'url': url,
                                 'resolved': str(cand.relative_to(ROOT))})

            for m in SRCSET.finditer(txt):
              for part in [s.strip() for s in m.group(2).split(',') if s.strip()]:
                url = part.split()[0]
                cand = resolve(html, url)
                if cand and not cand.exists():
                  problems.append({'file': str(html), 'attr': 'srcset', 'url': url,
                                   'resolved': str(cand.relative_to(ROOT))})

            for m in CSSURL.finditer(txt):
              url = m.group(1).strip().strip('"\\\'')
              cand = resolve(html, url)
              if cand and not cand.exists():
                problems.append({'file': str(html), 'attr': 'style-url', 'url': url,
                                 'resolved': str(cand.relative_to(ROOT))})

          if problems:
            print(f'Broken internal links: {len(problems)}')
            for r in problems[:120]:
              print(f"- {r['file']}: {r['attr']}='{r['url']}' → {r['resolved']} (MISSING)")
            Path('link-report.json').write_text(json.dumps(problems, indent=2), encoding='utf-8')
            sys.exit(1)

          print('OK: no missing internal links')
          PY

      - name: Upload link report if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: link-report
          path: link-report.json

